<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Page Title</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" media="screen" href="JSDemo2.css" />
    <script src="JSDemo2.js"></script>
</head>

<body onload="checkCookies()">

    <!-- 改变 HTML 内容 -->
    <p id="intro">你好世界!</p>
    <p>该实例展示了
        <b>getElementById</b> 方法!</p>
    <script>
        x = document.getElementById("intro"); //若未找到该id的元素，则x.innerHTML返回获取方法字符串
        document.write("<p>文本来自 id 为 intro 段落: " + x.innerHTML + "</p>");
        x.innerHTML = "改变html内容";
    </script>

    <p class="intro">你好世界!</p>
    <p>该实例展示了
        <b>getElementsByClassName</b> 方法!</p>
    <script>
        x = document.getElementsByClassName("intro"); //若未找到该id的元素，则x.innerHTML返回获取方法字符串
        document.write("<p>文本来自 class 为 intro 段落: " + x[0].innerHTML + "</p>");
        x.innerHTML = "改变html内容";
    </script>
    <p>
        <b>注意：</b>Internet Explorer 8 及更早 IE 版本不支持 getElementsByClassName() 方法。</p>


    <!-- 改变 HTML 输出流 -->
    <script>
        document.write(Date()); //文件加载完成之后用这种方式写入会覆盖原文件。
    </script>

    <!-- 改变属性值 -->
    <img id="image" src="smiley.gif" width="160" height="120">
    <script>
        document.getElementById("image").src =
            "https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1539154028,2259069525&fm=15&gp=0.jpg";
    </script>
    <p>原图片为 smiley.gif,脚本将图片修改为 landscape.jpg</p>


    <!-- 改变css样式 -->
    <p id="p1">Hello World!</p>
    <p id="p2">Hello World!</p>
    <script>
        document.getElementById("p2").style.color = "blue";
        document.getElementById("p2").style.fontFamily = "Arial";
        document.getElementById("p2").style.fontSize = "larger";
    </script>
    <p>以上段落通过脚本修改。</p>


    <!-- 点击事件 -->
    <h1 id="id1">我的标题 1</h1>
    <button type="button" onclick="document.getElementById('id1').style.color='red'">
        点我!</button>
    <p id="p3">这是一个文本。 这是一个文本。 这是一个文本。 这是一个文本。 这是一个文本。 这是一个文本。 这是一个文本。</p>
    <input type="button" value="隐藏文本" onclick="document.getElementById('p3').style.visibility='hidden'" />
    <input type="button" value="显示文本" onclick="document.getElementById('p3').style.visibility='visible'" />

    <!-- 这里的this指代改html元素 -->
    <h1 onclick="changetext(this)">点击文本!</h1>
    <script>
        function changetext(id) {
            id.innerHTML = "Ooops!";
        }
    </script>

    <p>点击按钮执行
        <em>displayDate()</em> 函数.</p>
    <button id="myBtn">使用 HTML DOM 来分配事件，点这里</button>
    <script>
        document.getElementById("myBtn").onclick = function () {
            displayDate()
        };

        function displayDate() {
            document.getElementById("demo").innerHTML = Date();
        }
    </script>
    <p id="demo"></p>


    <!-- 网页加载过程 -->
    <script>
        function checkCookies() {
            if (navigator.cookieEnabled == true) {
                alert("Cookies 可用")
            } else {
                alert("Cookies 不可用")
            }
        }
    </script>
    <p>弹窗-提示浏览器 cookie 是否可用。</p>

    输入你的名字:
    <input type="text" id="fname" onchange="myFunction()">
    <p>当你离开输入框后，函数将被触发，将小写字母转为大写字母。</p>

    <script>
        function myFunction() {
            var x = document.getElementById("fname");
            x.value = x.value.toUpperCase();
        }
    </script>

    <div onmouseover="mOver(this)" onmouseout="mOut(this)" style="background-color:#D94A38;width:120px;height:20px;padding:40px;">Mouse Over Me</div>
    <script>
        function mOver(obj) {
            obj.innerHTML = "Thank You"
        }

        function mOut(obj) {
            obj.innerHTML = "Mouse Over Me"
        }
    </script>

    <p>该实例使用 addEventListener() 方法向同个按钮中添加两个点击事件。</p>
    <button id="myBtn1">按钮事件监听,点我</button>
    <script>
        var x = document.getElementById("myBtn1");
        // 这里若用myFunction()则代表马上执行函数，addEventListener后面跟的是函数名，所以要想函数可以接受参数只能使用匿名函数
        x.addEventListener("click", myFunction);
        x.addEventListener("click", someOtherFunction);

        function myFunction(a) {
            alert("Hello World!" + a);
        }

        function someOtherFunction() {
            alert("函数已执行!");
        }
    </script>

    <!-- js事件监听 -->

    <p>实例使用 addEventListener() 方法在同一个按钮中添加多个事件。</p>
    <button id="myBtn2">按钮中添加多个事件，点我</button>
    <p id="demo2"></p>
    <script>
        var x = document.getElementById("myBtn2");
        x.addEventListener("mouseover", myFunction);
        x.addEventListener("click", mySecondFunction);
        x.addEventListener("mouseout", myThirdFunction);

        function myFunction() {
            document.getElementById("demo2").innerHTML += "Moused over!<br>"
        }

        function mySecondFunction() {
            document.getElementById("demo2").innerHTML += "Clicked!<br>"
        }

        function myThirdFunction() {
            document.getElementById("demo2").innerHTML += "Moused out!<br>"
        }
    </script>


    <p>实例在 window 对象中使用 addEventListener() 方法。</p>
    <p>尝试重置浏览器的窗口触发 "resize" 事件句柄。</p>
    <p id="demo3"></p>
    <script>
        window.addEventListener("resize", function () {
            document.getElementById("demo3").innerHTML = Math.random();
        });
    </script>


    <p>实例演示了在使用 addEventListener() 方法时如何传递参数。</p>
    <p>点击按钮执行计算。</p>
    <button id="myBtn3">点我</button>
    <p id="demo4"></p>
    <script>
        var p1 = 5;
        var p2 = 7;
        document.getElementById("myBtn3").addEventListener("click", function () {
            myFunction(p1, p2);
        });

        var car1 = Car();
        document.getElementById("myBtn3").addEventListener("click", function () {
            myFunction1(car1);
        });
        var arrayObj = new Array();　 //创建一个数组  
        document.getElementById("myBtn3").addEventListener("click", function () {
            myFunction2(arrayObj);
        });

        function Car() {
            var ocar = new Object;
            ocar.color = "blue";
            ocar.doors = 4;
            ocar.showColor = function () {
                document.write(this.color)
            };
            return ocar;
        }


        function myFunction(a, b) {
            a = a + 3;
            // 通过这里a+3 返回点击后result依然是56可以确定匿名函数保存的是最初变量的值，及标量只是值得名称。
            var result = a * b;
            document.getElementById("demo4").innerHTML = result;
        }
        // 通过myFunction1  myFunction2观察可知匿名函数保存的是对象的引用。
        function myFunction1(c) {
            c.doors += 3;
            alert(c.doors);
        }

        function myFunction2(array) {
            array.push(2);
            alert("数组元素个数" + array);
        }
    </script>

    <p>实例演示了在添加不同事件监听时，冒泡与捕获的不同。</p>
    <div id="myDiv">
        <p id="myP">点击段落，我是冒泡。</p>
    </div>
    <br>
    <div id="myDiv2">
        <p id="myP2">点击段落，我是捕获。 </p>
    </div>
    <script>
        document.getElementById("myP").addEventListener("click", function () {
            alert("你点击了 P 元素!");
        }, false);
        document.getElementById("myDiv").addEventListener("click", function () {
            alert(" 你点击了 DIV 元素 !");
        }, false);
        document.getElementById("myP2").addEventListener("click", function () {
            alert("你点击了 P2 元素!");
        }, true);
        document.getElementById("myDiv2").addEventListener("click", function () {
            alert("你点击了 DIV2 元素 !");
        }, true);
    </script>


    <div id="myDIV5"> div 元素添加了 onmousemove 事件句柄，鼠标在桔红色的框内移动时会显示随机数。
        <p>点击按钮移除 DIV 的事件句柄。</p>
        <button onclick="removeHandler()" id="myBtn5">点我</button>
    </div>
    <p id="demo5"></p>
    <script>
        document.getElementById("myDIV5").addEventListener("mousemove", myFunction);

        function myFunction() {
            document.getElementById("demo5").innerHTML = Math.random();
        }

        function removeHandler() {
            document.getElementById("myDIV5").removeEventListener("mousemove", myFunction);
        }
    </script>

    <!-- JavaScript HTML DOM 元素 (节点) -->


    <div id="div3">
        <p id="p5">追加元素节点，这是一个段落。</p>
        <p id="p6">这是另外一个段落。</p>
    </div>
    <script>
        var para = document.createElement("p");
        var node = document.createTextNode("这是一个新的段落。");
        para.appendChild(node);
        var element = document.getElementById("div3");
        element.appendChild(para);
    </script>


    <div id="div4">
        <p id="p7">插入元素节点，这是一个段落。</p>
        <p id="p8">这是另外一个段落。</p>
    </div>

    <script>
        var para = document.createElement("p");
        var node = document.createTextNode("这是一个新的段落。");
        para.appendChild(node);

        var element = document.getElementById("div4");
        var child = document.getElementById("p7");
        element.insertBefore(para, child);
    </script>

    <div id="div5">
        <p id="p9">这是要移除的元素节点，这是一个段落。</p>
        <p id="p10">上面有个节点被移除了，注意看源代码，这是另外一个段落。</p>
    </div>

    <script>
        var parent = document.getElementById("div5");
        var child = document.getElementById("p9");
        parent.removeChild(child);
    </script>
    <div id="div6">
        <p id="p11">改元素节点被替换了，这是一个段落。</p>
        <p id="p12">上面有个p标签被替换掉了，详情请查看源代码，这是另外一个段落。</p>
    </div>

    <script>
        var para = document.createElement("p");
        var node = document.createTextNode("这是一个新的段落。");
        para.appendChild(node);

        var parent = document.getElementById("div6");
        var child = document.getElementById("p11");
        parent.replaceChild(para, child);
    </script>

    <h2>JavaScript HTML DOM</h2>

    <p>Hello World! </p>

    <p>Hello Runoob!</p>

    <h1 id="demo6">demo6</h1>
    <h1 id="demo7">demo6</h1>

    <script>
        var myCollection = document.getElementsByTagName("p");
        document.getElementById("demo6").innerHTML = "第二个段落的内容为:<span style='color:red;'> " + myCollection[myCollection
            .length - 1].innerHTML + '</span>';
    </script>

    <script>
        var myNodelist = document.querySelectorAll("p");
        document.getElementById("demo7").innerHTML = "第二个段落的内容为:<span style='color:red;'> " + myNodelist[myNodelist.length -
            1].innerHTML + '</span>';
    </script>

    <div id="ct">
        这里是介于node与node之间的textNode
        <p class="para">Lyndon</p>
        这里是介于node与node之间的textNode
        <p class="attr">123
            <span>dozz</span>
        </p>
        这里是介于node与node之间的textNode
    </div>
    <script>
        var ct = document.getElementById("ct");
        console.log(ct.children); //子元素节点 HTMLCollection 类型
        console.log(ct.childNodes); //所有子节点  NodeList 类型
    </script>






</body>

</html>